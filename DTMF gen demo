#include <iostream>
#include <cmath>
#include <fstream>
#include <map>
const double MY_PI = 3.14159265358979323846;  // Manuel definition af Pi


const int SAMPLE_RATE = 44100;  // Samplingsfrekvens
const int AMPLITUDE = 32000;    // Amplitude for signalet
const double DURATION = 0.5;    // Varighed af tonen i sekunder

// DTMF-frekvensopslagstabel for kommandoer
struct DTMFCommand {
    int low_freq;
    int high_freq;
};

std::map<char, DTMFCommand> command_map = {
    {'2', {770, 1336}},  // Frem
    {'6', {770, 1477}},  // Højre
    {'8', {852, 1336}},  // Tilbage
    {'4', {770, 1209}}   // Venstre
};

void generate_dtmf_tone(char key, const std::string &filename) {
    auto it = command_map.find(key);
    if (it == command_map.end()) {
        std::cerr << "Ugyldig kommando: " << key << std::endl;
        return;
    }

    int low_freq = it->second.low_freq;
    int high_freq = it->second.high_freq;

    std::ofstream file(filename, std::ios::binary);
    for (int i = 0; i < SAMPLE_RATE * DURATION; ++i) {
        double sample = AMPLITUDE * (sin(2 * MY_PI * low_freq * i / SAMPLE_RATE) +
                                     sin(2 * MY_PI * high_freq * i / SAMPLE_RATE)) / 2.0;
        short int sample_short = static_cast<short int>(sample);
        file.write(reinterpret_cast<const char*>(&sample_short), sizeof(sample_short));
    }

    file.close();
    std::cout << "DTMF-tone for kommando '" << key << "' genereret og gemt som " << filename << std::endl;
}

int main() {
    // Generér og gem DTMF-tone for hver kommando
    generate_dtmf_tone('2', "frem.raw");
    generate_dtmf_tone('6', "hojre.raw");
    generate_dtmf_tone('8', "tilbage.raw");
    generate_dtmf_tone('4', "venstre.raw");

    return 0;
}
